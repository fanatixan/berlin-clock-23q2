jest.mock('../src/BerlinClock');

const toBerlinTime = require('../src/BerlinClock');
const { cli, lightToEmoji, rowToEmoji } = require('../src/cli');

describe('Given a CLI interface', () => {
  describe('When having a red light', () => {
    test('Then ğŸ”´ is printed to the console', () => {
      expect(lightToEmoji('R')).toBe('ğŸ”´');
    });
  });

  describe('When having a yellow light', () => {
    test('Then ğŸŸ¡ is printed to the console', () => {
      expect(lightToEmoji('Y')).toBe('ğŸŸ¡');
    });
  });

  describe('When having an off light', () => {
    test('Then âšª is printed to the console', () => {
      expect(lightToEmoji('O')).toBe('âšª');
    });
  });

  describe('When having a row of lights', () => {
    test.each`
      input            | expected
      ${'R'}           | ${'ğŸ”´'}
      ${'Y'}           | ${'ğŸŸ¡'}
      ${'RROO'}        | ${'ğŸ”´ğŸ”´âšªâšª'}
      ${'YYYO'}        | ${'ğŸŸ¡ğŸŸ¡ğŸŸ¡âšª'}
      ${'YYRYYROOOOO'} | ${'ğŸŸ¡ğŸŸ¡ğŸ”´ğŸŸ¡ğŸŸ¡ğŸ”´âšªâšªâšªâšªâšª'}
    `(
      'Then each light of $input is converted to emojis $expected',
      ({ input, expected }) => {
        expect(rowToEmoji(input)).toBe(expected);
      },
    );
  });

  describe('When having a full clock', () => {
    test('Then it is converted to an emoji representation', () => {
      toBerlinTime.mockReturnValue({
        seconds: 'Y',
        fiveHours: 'RROO',
        oneHour: 'RROO',
        fiveMinutes: 'YYRYYROOOOO',
        oneMinute: 'YYYY',
      });
      expect(cli('12:34:56')).toBe(
        'ğŸŸ¡\nğŸ”´ğŸ”´âšªâšª\nğŸ”´ğŸ”´âšªâšª\nğŸŸ¡ğŸŸ¡ğŸ”´ğŸŸ¡ğŸŸ¡ğŸ”´âšªâšªâšªâšªâšª\nğŸŸ¡ğŸŸ¡ğŸŸ¡ğŸŸ¡',
      );
    });
  });
});
